module AwaitOnFut;

// 1 COG created with 1 process doing an expensive computation (fib) and simbling processes waiting until this computation is done

def Int fib(Int n) = case n {
    0 => 1;
    1 => 1;
    _ => fib(n-1) + fib(n-2);
};

interface I {
    Int fib_(Int n);
    Unit wait(Fut<Int> f);
}

class C implements I {
  Int fib_(Int n) {
      return fib(n);
  }
  Unit wait(Fut<Int> f) {
      await f?;
  }
}    

{
 I o = new C();
 Fut<Int> f = o ! fib_(30);
 Int i = 0;
 while (i < 1000) {
     o ! wait(f);
     i=i+1;
 }
 Int res = f.get;
 println(toString(res));
}