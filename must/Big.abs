// Adapted from bencherl/big.erl
// A many to many message passing

module Big;

interface A {
  Unit start(List<A> neighbours);
  Unit ping(A sender);
  Unit pong();
}

class Actor() implements A {
 Int pongers = 0; 
 List<A> neighbours = Nil;
 Unit start(List<A> nbrs) {
     this.neighbours = nbrs;
     Fut<Unit> f = this ! send();
     await f?; // wait until send is done
     await (neighbours==Nil && pongers == 0); // then do the check
 }
 Unit send() {
   if (neighbours != Nil) {
       A next = head(neighbours);
       next ! ping(this);
       neighbours=tail(neighbours);
       Fut<Unit> f = this ! send();          // recurse asynchronously, so other messsages can be interleaved
       await f?;
   }
 }
 Unit ping(A sender) {
     pongers = pongers + 1;
     sender ! pong();
 }

 Unit pong() {
     pongers = pongers - 1;
 }

}


{
 Int actors = 100;
 Int i = actors;
 A a;
 List<A> as = Nil;
 // spawn the actors
 while (i > 0) {
     a = new Actor();
     as = Cons(a,as);
     i = i-1;
 }
 List<A> as_ = as;
 List<Fut<Unit>> fs = Nil;
 Fut<Unit> f;
 // start the actors, by giving them the ids of their neighbouring actors (including themselves)
 while (as_ != Nil) {
     a = head(as_);
     f = a ! start(as);
     fs = Cons(f,fs);
     as_ = tail(as_);
 }
 // wait for the actors to finish
 while (fs != Nil) {
    f = head(fs);
    await f?;
    fs = tail(fs);
 }
}