module AwaitOnField;

// 1 COG created with 1 process doing an expensive computation (fib) and simbling processes waiting until this computation is done

// The same as AwaitOnFut, but instead of waiting on the future of the computation, the simbling processes
// wait for a boolean field to become true.

def Int fib(Int n) = case n {
    0 => 1;
    1 => 1;
    _ => fib(n-1) + fib(n-2);
};

interface I {
    Int fib_(Int n);
    Unit wait();
}

class C implements I {
  Bool isDone = False;
  Int fib_(Int n) {
      Int res = fib(n);
      this.isDone = True;
      return res;
  }
  Unit wait() {
      await this.isDone;
  }
}    

{
 I o = new C();
 Fut<Int> f = o ! fib_(30);
 Int i = 0;
 while (i < 1000) {
     o ! wait();
     i=i+1;
 }
 Int res = f.get;
 println(toString(res));
}