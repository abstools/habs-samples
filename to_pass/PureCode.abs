module PureCode;

def A getLeft<A,B>(Either<A,B> e) = left(e);

def Int f(Int y) = let (Int x) = y+ 3 in
						let (Int x) = x + 4 in x + 1;

def A either<A,B>(Either<A,A> e) = case e {
    Left(l) => l;
    Right(r) => r;
    };

def List<Pair<Int, Bool>> changeToFalse(Int j, Int n, Int last, Int offset) = changeToFalse_(j, n, last, offset, Nil);

def List<Pair<Int, Bool>> changeToFalse_(Int j, Int n, Int last, Int offset, List<Pair<Int,Bool>> acc) = 
    if (j <= last) 
    then changeToFalse_(j+2*n, n, last, offset, Cons(Pair(truncate((j - offset) / 2), False), acc))
    else acc;

def Int doubleCase() = 3 + case case 4 { 
      4 => 5;
    } {
    5 => 7;
};

def Int doubleIf() = if if 5 > 4 then True else False then 3+4 else 4;

{
  Int y = f(3);
  assert y==11;

  Either<Int,Bool> e1 = Left(3);
  assert getLeft(e1) == 3;

  Either<Bool,Bool> e2 = Right(True);
  assert either(e2);

  assert doubleCase() == 10;
  assert doubleIf() == 7; 

  println("ok");
}