module RoseTree;


data RoseTree<Int> = RoseTree_(Int,List<RoseTree<Int>>);

def Bool dfs_fun(RoseTree<Int> t, Int v) = case t {
    RoseTree_(v_,Nil) => v == v_;
    RoseTree_(v_, ts) => if v == v_ 
                        then True
                        else dfs_fun_(ts, v);
};

def Bool dfs_fun_(List<RoseTree<Int>> ts, Int v) = case ts {
    Nil => False;
    Cons(t,ts_) => dfs_fun(t,v) || dfs_fun_(ts_,v);
};


{
  RoseTree<Int> t = RoseTree_(1, list[RoseTree_(2,Nil)]);
  Bool res1 = dfs_fun(t,2);
  Bool res2 = dfs_fun(t,3);
  assert res1;
  assert not(res2);
  println("ok");
}
